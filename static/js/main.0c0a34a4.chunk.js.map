{"version":3,"sources":["component/Header.js","component/DonutGraph/DonutGraph.js","component/SmallWidget.js","component/BarGraph/Xaxis.js","component/BarGraph/Yaxis.js","component/BarGraph/YaxisLegend.js","component/BarGraph/XaxisLegnd.js","component/BarGraph/Graphtitle.js","component/BarGraph/GraphBodyBackground.js","component/BarGraph/BarData.js","component/BarGraph/BarGraph.js","component/LargeWidget.js","component/Body.js","App.js","serviceWorker.js","index.js"],"names":["Header","aPPLContext","useContext","APPLContext","className","multiple","onChange","e","setselectboxdataHeader","target","value","onClick","onLoad","data","map","index","key","SalesPersonID","parseInt","console","log","selectboxdataHeader","DonutGraph","props","x","y","info","maxvalue","TypeofData","infolength","length","und","undefined","xvalue","checkvalue","formatter","Intl","NumberFormat","style","currency","formatedinfo","format","Math","round","outsidecirleadjuster","percent","width","height","viewBox","class","cx","cy","r","fill","stroke","stroke-width","stroke-dasharray","stroke-dashoffset","stroke-linecap","SmallWidget","Updatenumber","useRef","RefBonus","RefSalesLastYear","RefSalesYearTD","RefCommissionPct","Reftext","Refinfo","useEffect","updatedata","i","current","Bonus","SalesLastYear","SalesYTD","CommissionPct","Xaxis","x1","y1","x2","y2","strokeWidth","Yaxis","YaxisLegend","yvalue","space","StartingPointonYaxis","XaxisLegend","rotateValue","transform","Graphtitle","title","titlelen","GraphBodyBackground","Fragment","fillOpacity","strokeOpacity","BarData","diff","chfill","animation","BarGraph","XaxisLegnd","LargeWidget","Body","React","createContext","App","useState","DataFromExternalSource","Provider","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0c0a34a4.chunk.js","sourcesContent":["import React,{useContext, useState} from 'react'\r\nimport {APPLContext} from '../App'\r\nimport '../css/header.css'\r\n\r\nconst Header = () =>{\r\n    const aPPLContext = useContext(APPLContext)\r\n\r\n    //SalesPersonID id a field from the datafile -- this can be changed for a new ID field from a different file or source\r\n    \r\n    return(\r\n        \r\n        <div className ='App-header-outside-container'>\r\n          \r\n            <div className='title'>\r\n                Company X Sales Team Snap Shot\r\n            </div>\r\n            \r\n                <div className ='App-header-inside-container'>\r\n                    \r\n                        <table>\r\n                            <tbody>\r\n                                <tr><td>\r\n                                    <label>Sales Person ID :</label>\r\n                                    </td>\r\n                                    <td>\r\n                                    <select className='idSelector' multiple={false} onChange={e=>aPPLContext.setselectboxdataHeader(e.target.value)} onClick={e=>aPPLContext.setselectboxdataHeader(e.target.value)} onLoad={e=>aPPLContext.setselectboxdataHeader(e.target.value)}>\r\n                                    \r\n                                    {aPPLContext.data.map((aPPLContext,index) => \r\n                                        <option key={aPPLContext.SalesPersonID}\r\n                                                value={parseInt(aPPLContext.SalesPersonID)}>\r\n                                                {aPPLContext.SalesPersonID}\r\n                                                </option>\r\n                                        )\r\n                                    }\r\n                                    </select>\r\n                                    </td>\r\n                                </tr>\r\n                        {console.log(aPPLContext.selectboxdataHeader)}\r\n                        </tbody>\r\n                        </table>\r\n                </div>\r\n                \r\n        </div>\r\n       \r\n    )\r\n}\r\n\r\nexport default Header","import React from 'react'\r\nimport './css/DonutGraph.css'\r\n\r\nconst DonutGraph = (props) => {\r\nconst {x,y,info,maxvalue,TypeofData} = props\r\n\r\n\r\nlet infolength = info.length\r\nlet und=''\r\nconsole.log(infolength)\r\nif(infolength === undefined){infolength=0\r\n     und=undefined}\r\nconsole.log(infolength)\r\nlet xvalue = 0\r\nlet checkvalue = parseInt(info)\r\nconsole.log (info)\r\n\r\n//check length of string for spacing in the middle of the circle\r\nif (infolength === 0 && checkvalue <=10000){\r\n    xvalue = ((42-infolength)/2)-7\r\n    console.log('in here looking at info =0')\r\n}\r\nelse {\r\n    xvalue = ((42-infolength)/2)-13\r\n    console.log('in here looking at info greater then 0')\r\n}\r\nconsole.log ('this is the info in the checkvalue : ' + checkvalue)\r\nlet formatter = new Intl.NumberFormat('en-US', {\r\n    style: 'currency',\r\n    currency: 'USD',\r\n  });\r\n  let formatedinfo =''\r\n  if(und === undefined){\r\n    formatedinfo = formatter.format(info)\r\n    console.log('made it in here looking at the info that is undefined' + info)\r\n  }\r\n  else\r\n  {\r\n    formatedinfo = formatter.format(Math.round(checkvalue) )\r\n  }\r\n\r\n  let percent = 0\r\n  let rightvalue = 0\r\n  let outsidecirleadjuster = ''\r\n  percent = (info/maxvalue)*100\r\n \r\n  if (percent > 0 && percent < 1){percent = percent * 1000}\r\n  rightvalue = 100-percent\r\n  if (TypeofData === 'CommissionPct'){formatedinfo=percent}\r\n  outsidecirleadjuster=percent+\" \"+rightvalue\r\n  console.log ('percent = ' + percent)\r\n  console.log ('outsidecirleadjuster = ' + outsidecirleadjuster)\r\n\r\n    return(\r\n        <div>\r\n            \r\n           \r\n            \r\n            <svg width={x} height={y} viewBox=\"0 0 62 62\" class=\"donut\">\r\n                \r\n                    <circle class=\"donut-hole\" cx=\"21\" cy=\"21\" r=\"15.91549430918954\" fill=\"pink\"></circle>\r\n                    <circle class=\"donut-ring\" cx=\"21\" cy=\"21\" r=\"15.91549430918954\" fill=\"transparent\" stroke=\"green\" stroke-width=\"4\"></circle>\r\n                    <circle class=\"donut-ring\" cx=\"21\" cy=\"21\" r=\"15.91549430918954\" fill=\"transparent\" stroke=\"red\" stroke-width=\"4\" stroke-dasharray=\"30 70\" stroke-dashoffset=\"0\"></circle>\r\n                    <circle class=\"donut-ring\" cx=\"21\" cy=\"21\" r=\"15.91549430918954\" fill=\"transparent\" stroke=\"yellow\" stroke-width=\"4\" stroke-dasharray=\"30 70\" stroke-dashoffset=\"70\"></circle>\r\n                    \r\n                    <circle class=\"donut-segment\" cx=\"21\" cy=\"21\" r=\"15.91549430918954\" fill=\"transparent\" stroke=\"blue\" stroke-width=\"2\" stroke-linecap='round' stroke-dasharray={outsidecirleadjuster} stroke-dashoffset=\"0\" ></circle>\r\n                    <text x='40' y='21'className='maxvalue'>{maxvalue}</text>\r\n                    <text x={xvalue} y='21'className='info'>{formatedinfo}</text>\r\n            </svg>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DonutGraph","import React,{useContext,useRef,useEffect,useState} from 'react'\r\nimport {APPLContext} from '../App'\r\nimport DonutGraph from './DonutGraph/DonutGraph'\r\nimport '../css/Widget.css'\r\n\r\nconst SmallWidget = (props) =>{\r\n    const {TypeofData, maxvalue} = props\r\n    const aPPLContext = useContext(APPLContext)\r\n    const Updatenumber = useRef('')\r\n    const RefBonus = useRef(0)\r\n    const RefSalesLastYear = useRef(0)\r\n    const RefSalesYearTD = useRef(0)\r\n    const RefCommissionPct = useRef(0)\r\n    const Reftext = useRef('')\r\n    const Refinfo = useRef(0)\r\n    //console.log (aPPLContext.selectboxdataHeader)\r\n    \r\n    useEffect(() => {\r\n      //console.log (aPPLContext.selectboxdataHeader)\r\n      updatedata()\r\n     \r\n    },[aPPLContext.selectboxdataHeader]);\r\n\r\n    \r\n    //updates small widgets with the information once salepersonid is matched with what was selected\r\n    //from dropdown box stored in selectboxdataHeader\r\n\r\n    const updatedata = () =>{\r\n     \r\n    let i = 0\r\n    let j= 0\r\n    for (i; i < parseInt(aPPLContext.data.length);) {\r\n   \r\n     if(parseInt(aPPLContext.selectboxdataHeader) === aPPLContext.data[i].SalesPersonID){\r\n      \r\n        Updatenumber.current = aPPLContext.data[i].SalesPersonID\r\n        RefBonus.current = aPPLContext.data[i].Bonus\r\n        RefSalesLastYear.current = aPPLContext.data[i].SalesLastYear\r\n        RefSalesYearTD.current = aPPLContext.data[i].SalesYTD\r\n        RefCommissionPct.current = aPPLContext.data[i].CommissionPct\r\n       \r\n     }\r\n     i=i+1\r\n  }\r\n\r\n   \r\n  \r\n\r\n  //put the right information into the widgets based on what is provide from TypeofData\r\n\r\n    switch(TypeofData) {\r\n        case \"Bonus\":\r\n          Reftext.current = \"Bonus\";\r\n          Refinfo.current = RefBonus.current \r\n                  \r\n          break;\r\n        case \"SalesYTD\":\r\n          Reftext.current = \"Sales YTD\";\r\n          Refinfo.current = RefSalesYearTD.current\r\n          break;\r\n        case \"SalesLastYear\":\r\n          Reftext.current = \"Sales Last Year\";\r\n          Refinfo.current = RefSalesLastYear.current\r\n          break;\r\n        case \"CommissionPct\":\r\n          Reftext.current = \"Commission %\";\r\n          Refinfo.current = RefCommissionPct.current\r\n            break;\r\n        default:\r\n          \r\n      } \r\n}\r\n    //console.log('this is the smallwidget data')\r\n   \r\n    \r\n   \r\n     \r\n\r\n    return(\r\n        <div className = 'small-Widget'>\r\n        \r\n            {aPPLContext.data.map((e,index) => {\r\n              \r\n              console.log(e.SalesPersonID)\r\n              return(\r\n                <div key={e}>\r\n                    {updatedata()}\r\n                </div>\r\n              )\r\n            })}  \r\n            \r\n            <div className = 'small-Widget-text'>\r\n            <p>{Reftext.current}</p></div>\r\n            <div className ='small-Widget-info'>\r\n            <DonutGraph x='230' y='230' info={Refinfo.current} maxvalue={maxvalue} TypeofData={TypeofData}/>\r\n            </div>\r\n        </div>\r\n              \r\n\r\n        \r\n    )\r\n}\r\nexport default SmallWidget\r\n","import React from 'react'\r\n\r\nconst Xaxis = (props) => {\r\nconst {x,y} = props\r\n\r\n\r\n    return(\r\n        <svg>\r\n       <line x1={(x-700)} y1={(y-100)} x2={(x-100)} y2={(y-100)} stroke ='rgb(255,56,0)' strokeWidth='2' />\r\n    \r\n        </svg>\r\n    )\r\n}\r\nexport default Xaxis","import React,{useContext} from 'react'\r\nimport {APPLContext} from './../../App'\r\n\r\nconst Yaxis = (props) => {\r\n    const aPPLContext = useContext(APPLContext)\r\n    const {x,y} = props\r\n    \r\n\r\n\r\n    return(\r\n   <svg>\r\n     <line x1={(x-700)} y1=\"100\" x2={(x-700)} y2={(y-100)} stroke ='rgb(255,56,0)' strokeWidth='2' />\r\n    </svg>\r\n    )\r\n}\r\nexport default Yaxis","import React, {useRef,useContext} from 'react'\r\nimport {APPLContext} from './../../App'\r\n\r\nconst YaxisLegend = (props) => {\r\n//mindata=0.0\r\n//Maxdata=5200475.2313'\r\n\r\n//height of y axis is 410\r\nconst {x,y} = props\r\n    const xvalue = useRef('')\r\n    const yvalue = useRef('')\r\n    const space = useRef('')\r\n    const aPPLContext = useContext(APPLContext)\r\n\r\n    xvalue.current = (x-785)\r\n    let spacebetweenyvalues = 408/5\r\n    space.current = spacebetweenyvalues\r\n    let StartingPointonYaxis = (y-100)\r\n    yvalue.current = StartingPointonYaxis\r\n    \r\n    let legendforyaxis = ['$2,000,000','$4,000,000','$6,000,000','$8,000,000','$10,000,000']\r\n//console.log (legendforyaxis)\r\n//console.log ('made it in YaxisLegend')\r\n    return (\r\n        <svg>\r\n            {legendforyaxis.map((e,index) => {\r\n                   \r\n                   \r\n                   \r\n                  \r\n                   yvalue.current=yvalue.current-space.current\r\n                   \r\n                       return (\r\n                           <text\r\n\r\n                           key={e}\r\n                           x={xvalue.current}\r\n                           y={yvalue.current}\r\n                           \r\n                           \r\n                           fill=\"yellow\"\r\n                           \r\n                           >{e}\r\n                           </text>\r\n          \r\n                       );\r\n                      \r\n   \r\n                   }\r\n                 )\r\n               }\r\n        </svg>\r\n\r\n    ) \r\n    \r\n}\r\nexport default YaxisLegend","import React, {useRef,useContext} from 'react'\r\nimport {APPLContext} from './../../App'\r\n\r\nconst XaxisLegend = (props) => {\r\n    const {x,y} = props\r\n    const xvalue = useRef('')\r\n    const yvalue = useRef('')\r\n    const rotateValue = useRef('')\r\n    const aPPLContext = useContext(APPLContext)\r\n\r\n    xvalue.current = (x-700)\r\n    yvalue.current = (y-90)\r\n\r\n    //rotates words on x axis\r\n    const rotateword = () => {\r\n\r\n        rotateValue.current = \"rotate (50 \" + xvalue.current +\",\" + yvalue.current + \")\"\r\n    }\r\n\r\n    return(\r\n    <svg>\r\n       \r\n {aPPLContext.data.map((e,index) => {\r\n                   \r\n                   \r\n                   xvalue.current=xvalue.current+32 //32 equals spacing between the bars\r\n                  \r\n                   \r\n                   \r\n                       return (\r\n                           <text\r\n\r\n                           key={e}\r\n                           x={xvalue.current}\r\n                           y={yvalue.current}\r\n                           value={rotateword()}\r\n                           transform={rotateValue.current}\r\n                           fill=\"yellow\"\r\n                           \r\n                           >{e.SalesPersonID}\r\n                           </text>\r\n          \r\n                       );\r\n   \r\n                   }\r\n                 )\r\n               }\r\n    </svg>\r\n    )\r\n\r\n}\r\n\r\nexport default XaxisLegend\r\n","import React from 'react'\r\nimport './css/title.css'\r\nconst Graphtitle = (props) => {\r\n\r\n    const {title, x, y} =props\r\n    let titlelen = title.length*7\r\n    let xvalue = (parseInt(x) - parseInt(titlelen))/2.5\r\n    //console.log(\"title x position:\" + xvalue)\r\n    return(\r\n        <svg>\r\n         <text className = 'GraphTitle' x={xvalue} y={y-550}>{title}</text> \r\n        </svg>\r\n    )\r\n}\r\nexport default Graphtitle","import React from 'react'\r\n\r\nconst GraphBodyBackground = (props) => {\r\nconst {x,y} = props\r\n\r\n    return(\r\n        <React.Fragment>\r\n        <rect x={(x-701)} y={(y-510)} width=\"600\" height=\"410\" fill = \"black\" stroke = \"red\" strokeWidth=\".2\" fillOpacity = \"0.4\" strokeOpacity = \"0.9\" />\r\n       \r\n        </React.Fragment>\r\n    )\r\n}\r\nexport default GraphBodyBackground\r\n","import React, {useContext,useRef,useEffect} from 'react'\r\nimport {APPLContext} from './../../App'\r\nimport './css/bar.css'\r\n\r\nconst BarData = (props) => {\r\n\r\nconst xvalue = useRef('');\r\nconst height = useRef('');\r\nconst yvalue = useRef('');\r\nconst diff = useRef('');\r\nconst chfill = useRef('blue');\r\nconst SalesPersonID = useRef('')\r\n\r\n\r\n\r\n\r\nconst {x,y} = props\r\nconst aPPLContext = useContext(APPLContext)\r\n\r\n\r\n//number of bars for the chart determined by how many arrays in object\r\n\r\nuseEffect(() => {\r\n    fill();\r\n  }, []);\r\n\r\nconst fill = () => {\r\n    if (SalesPersonID.current===parseInt(aPPLContext.selectboxdataHeader)){\r\n        chfill.current = 'sienna'\r\n    }\r\n    else{\r\n        chfill.current = 'tan'\r\n        //console.log('made it in here yahoo')\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\nxvalue.current = (x-700)\r\nheight.current = (0)\r\n//console.log('this is the space between bars'+ xvalue.current)\r\n\r\n\r\n\r\n\r\n\r\n    return (\r\n            <svg>\r\n               \r\n               {aPPLContext.data.map((e,index) => {\r\n                   \r\n                    diff.current = (((parseInt(e.SalesYTD)/10000)/10)*4.05)\r\n                    console.log(e.SalesPersonID + ' ' + e.SalesYTD)\r\n                    console.log(diff.current)\r\n                    xvalue.current=xvalue.current+32 //32 equals spacing between the bars\r\n                    yvalue.current = ((y - 100) - diff.current)\r\n                    \r\n                    height.current = y-(yvalue.current+(y-(y-101)))\r\n                    \r\n                    \r\n                    SalesPersonID.current = e.SalesPersonID\r\n                    //console.log(SalesPersonID.current + '  ' + aPPLContext.selectboxdataHeader)   \r\n                    \r\n                        return (\r\n                            <rect\r\n                            className='bar'\r\n                            animation= \"bounce linear 400ms\"\r\n                            key={e}\r\n                            x={xvalue.current}\r\n                            y={yvalue.current}\r\n                            height={height.current}\r\n                            width=\"15\"\r\n                            value={fill()}\r\n                            fill={chfill.current}\r\n                            \r\n                            />\r\n           \r\n                        );\r\n    \r\n                    }\r\n                  )\r\n                }\r\n               \r\n            </svg>\r\n    )\r\n}\r\n\r\nexport default BarData","import React from 'react'\r\nimport Xaxis from './Xaxis'\r\nimport Yaxis from './Yaxis'\r\nimport YaxisLegend from './YaxisLegend'\r\nimport XaxisLegnd from './XaxisLegnd'\r\nimport Graphtitle from './Graphtitle'\r\nimport GraphBodyBackground from './GraphBodyBackground'\r\n\r\n\r\nimport BarData from './BarData'\r\n// important stuff\r\nconst BarGraph = (props) => {\r\nconst {x,y}=props\r\n    return(\r\n        <div>\r\n\r\n            <svg width={x} height={y}>\r\n            <Graphtitle title=\"Sales team history YTD\" x={x} y={y} />\r\n            <GraphBodyBackground x={x} y={y} />\r\n            <Xaxis x={x} y={y}/>\r\n            <XaxisLegnd x={x} y={y}/>\r\n            <YaxisLegend x={x} y={y}/>\r\n            <Yaxis x={x} y={y}/>\r\n            <BarData x={x} y={y} />\r\n                   \r\n\r\n            </svg>\r\n        </div>\r\n        \r\n    )\r\n}\r\nexport default BarGraph","import React from 'react'\r\nimport '../css/Widget.css'\r\nimport BarGraph from './BarGraph/BarGraph'\r\nconst LargeWidget = () =>{\r\n\r\n    //size of Large-Widget is 800 width by 600 height\r\n    \r\n    return(\r\n        <div className = 'Large-Widget'>\r\n            <BarGraph x = '800' y = '610'/>\r\n        </div>\r\n    )\r\n}\r\nexport default LargeWidget","import React,{useContext, useState} from 'react'\r\nimport {APPLContext} from '../App'\r\nimport '../css/Body.css'\r\nimport SmallWidget from './SmallWidget'\r\nimport LargeWidget from './LargeWidget'\r\nconst Body = () =>{\r\n    const aPPLContext = useContext(APPLContext)\r\n    //console.log('bodydata')\r\n    //console.log(aPPLContext.data)\r\n    return(\r\n    <div className = 'Body-for-Graphs'>\r\n    \r\n    <span>\r\n    <LargeWidget />\r\n    \r\n    <span>\r\n    <SmallWidget TypeofData= 'SalesYTD' maxvalue= '10000000'/>\r\n    <SmallWidget TypeofData='SalesLastYear' maxvalue = '10000000'/>\r\n    <SmallWidget TypeofData='Bonus' maxvalue = '11000'/>\r\n    <SmallWidget TypeofData='CommissionPct' maxvalue = '100'/>\r\n    </span>\r\n    </span>\r\n    </div>\r\n    )\r\n}\r\nexport default Body","import React, {useState} from 'react';\r\n\r\nimport './App.css';\r\nimport DataFromExternalSource from './data.json';\r\nimport Header from './component/Header'\r\nimport Body from './component/Body'\r\nexport const APPLContext = React.createContext()\r\n\r\nconst App = () => {\r\n\r\n  const [data, setdata] = useState(DataFromExternalSource)\r\n  const [selectboxdataHeader, setselectboxdataHeader] = useState()\r\n  \r\n  console.log(data)\r\n  return (\r\n    <APPLContext.Provider value = {{data,selectboxdataHeader,setselectboxdataHeader}}>\r\n      <div className=\"App\">\r\n        \r\n        <Header />\r\n        <Body />\r\n        \r\n      </div>\r\n    </APPLContext.Provider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}